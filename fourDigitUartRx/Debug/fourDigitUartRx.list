
fourDigitUartRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800307c  0800307c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000060  080030e4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080030e4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073eb  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015fc  00000000  00000000  000274b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00028ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000505  00000000  00000000  00029148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a0e  00000000  00000000  0002964d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008386  00000000  00000000  0004005b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081c6a  00000000  00000000  000483e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c04  00000000  00000000  000ca04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cbc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f08 	.word	0x08002f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002f08 	.word	0x08002f08

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295
 800016a:	f000 b9a5 	b.w	80004b8 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9e08      	ldr	r6, [sp, #32]
 80001f2:	460d      	mov	r5, r1
 80001f4:	4604      	mov	r4, r0
 80001f6:	468e      	mov	lr, r1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d14c      	bne.n	8000296 <__udivmoddi4+0xaa>
 80001fc:	428a      	cmp	r2, r1
 80001fe:	4694      	mov	ip, r2
 8000200:	d967      	bls.n	80002d2 <__udivmoddi4+0xe6>
 8000202:	fab2 f382 	clz	r3, r2
 8000206:	b153      	cbz	r3, 800021e <__udivmoddi4+0x32>
 8000208:	fa02 fc03 	lsl.w	ip, r2, r3
 800020c:	f1c3 0220 	rsb	r2, r3, #32
 8000210:	fa01 fe03 	lsl.w	lr, r1, r3
 8000214:	fa20 f202 	lsr.w	r2, r0, r2
 8000218:	ea42 0e0e 	orr.w	lr, r2, lr
 800021c:	409c      	lsls	r4, r3
 800021e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000222:	fbbe f1f7 	udiv	r1, lr, r7
 8000226:	fa1f f58c 	uxth.w	r5, ip
 800022a:	fb07 ee11 	mls	lr, r7, r1, lr
 800022e:	fb01 f005 	mul.w	r0, r1, r5
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000238:	4290      	cmp	r0, r2
 800023a:	d90a      	bls.n	8000252 <__udivmoddi4+0x66>
 800023c:	eb1c 0202 	adds.w	r2, ip, r2
 8000240:	f101 3eff 	add.w	lr, r1, #4294967295
 8000244:	f080 8119 	bcs.w	800047a <__udivmoddi4+0x28e>
 8000248:	4290      	cmp	r0, r2
 800024a:	f240 8116 	bls.w	800047a <__udivmoddi4+0x28e>
 800024e:	3902      	subs	r1, #2
 8000250:	4462      	add	r2, ip
 8000252:	1a12      	subs	r2, r2, r0
 8000254:	fbb2 f0f7 	udiv	r0, r2, r7
 8000258:	fb07 2210 	mls	r2, r7, r0, r2
 800025c:	fb00 f505 	mul.w	r5, r0, r5
 8000260:	b2a4      	uxth	r4, r4
 8000262:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000266:	42a5      	cmp	r5, r4
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x94>
 800026a:	eb1c 0404 	adds.w	r4, ip, r4
 800026e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000272:	f080 8104 	bcs.w	800047e <__udivmoddi4+0x292>
 8000276:	42a5      	cmp	r5, r4
 8000278:	f240 8101 	bls.w	800047e <__udivmoddi4+0x292>
 800027c:	4464      	add	r4, ip
 800027e:	3802      	subs	r0, #2
 8000280:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000284:	2100      	movs	r1, #0
 8000286:	1b64      	subs	r4, r4, r5
 8000288:	b11e      	cbz	r6, 8000292 <__udivmoddi4+0xa6>
 800028a:	40dc      	lsrs	r4, r3
 800028c:	2300      	movs	r3, #0
 800028e:	e9c6 4300 	strd	r4, r3, [r6]
 8000292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000296:	428b      	cmp	r3, r1
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0xc0>
 800029a:	2e00      	cmp	r6, #0
 800029c:	f000 80ea 	beq.w	8000474 <__udivmoddi4+0x288>
 80002a0:	2100      	movs	r1, #0
 80002a2:	e9c6 0500 	strd	r0, r5, [r6]
 80002a6:	4608      	mov	r0, r1
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	fab3 f183 	clz	r1, r3
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d148      	bne.n	8000346 <__udivmoddi4+0x15a>
 80002b4:	42ab      	cmp	r3, r5
 80002b6:	d302      	bcc.n	80002be <__udivmoddi4+0xd2>
 80002b8:	4282      	cmp	r2, r0
 80002ba:	f200 80f8 	bhi.w	80004ae <__udivmoddi4+0x2c2>
 80002be:	1a84      	subs	r4, r0, r2
 80002c0:	eb65 0203 	sbc.w	r2, r5, r3
 80002c4:	2001      	movs	r0, #1
 80002c6:	4696      	mov	lr, r2
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d0e2      	beq.n	8000292 <__udivmoddi4+0xa6>
 80002cc:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d0:	e7df      	b.n	8000292 <__udivmoddi4+0xa6>
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xea>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 808e 	bne.w	80003fc <__udivmoddi4+0x210>
 80002e0:	1a88      	subs	r0, r1, r2
 80002e2:	2101      	movs	r1, #1
 80002e4:	0c17      	lsrs	r7, r2, #16
 80002e6:	fa1f fe82 	uxth.w	lr, r2
 80002ea:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ee:	fb07 0015 	mls	r0, r7, r5, r0
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002f8:	fb0e f005 	mul.w	r0, lr, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x126>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f105 38ff 	add.w	r8, r5, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x124>
 800030a:	4290      	cmp	r0, r2
 800030c:	f200 80cc 	bhi.w	80004a8 <__udivmoddi4+0x2bc>
 8000310:	4645      	mov	r5, r8
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	fbb2 f0f7 	udiv	r0, r2, r7
 8000318:	fb07 2210 	mls	r2, r7, r0, r2
 800031c:	fb0e fe00 	mul.w	lr, lr, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	45a6      	cmp	lr, r4
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x150>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x14e>
 8000334:	45a6      	cmp	lr, r4
 8000336:	f200 80b4 	bhi.w	80004a2 <__udivmoddi4+0x2b6>
 800033a:	4610      	mov	r0, r2
 800033c:	eba4 040e 	sub.w	r4, r4, lr
 8000340:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000344:	e7a0      	b.n	8000288 <__udivmoddi4+0x9c>
 8000346:	f1c1 0720 	rsb	r7, r1, #32
 800034a:	408b      	lsls	r3, r1
 800034c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000350:	ea4c 0c03 	orr.w	ip, ip, r3
 8000354:	fa25 fa07 	lsr.w	sl, r5, r7
 8000358:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035c:	fbba f8f9 	udiv	r8, sl, r9
 8000360:	408d      	lsls	r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	fb09 aa18 	mls	sl, r9, r8, sl
 800036a:	fa1f fe8c 	uxth.w	lr, ip
 800036e:	432b      	orrs	r3, r5
 8000370:	fa00 f501 	lsl.w	r5, r0, r1
 8000374:	fb08 f00e 	mul.w	r0, r8, lr
 8000378:	0c1c      	lsrs	r4, r3, #16
 800037a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800037e:	42a0      	cmp	r0, r4
 8000380:	fa02 f201 	lsl.w	r2, r2, r1
 8000384:	d90b      	bls.n	800039e <__udivmoddi4+0x1b2>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f108 3aff 	add.w	sl, r8, #4294967295
 800038e:	f080 8086 	bcs.w	800049e <__udivmoddi4+0x2b2>
 8000392:	42a0      	cmp	r0, r4
 8000394:	f240 8083 	bls.w	800049e <__udivmoddi4+0x2b2>
 8000398:	f1a8 0802 	sub.w	r8, r8, #2
 800039c:	4464      	add	r4, ip
 800039e:	1a24      	subs	r4, r4, r0
 80003a0:	b298      	uxth	r0, r3
 80003a2:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a6:	fb09 4413 	mls	r4, r9, r3, r4
 80003aa:	fb03 fe0e 	mul.w	lr, r3, lr
 80003ae:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x1dc>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f103 30ff 	add.w	r0, r3, #4294967295
 80003be:	d26a      	bcs.n	8000496 <__udivmoddi4+0x2aa>
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d968      	bls.n	8000496 <__udivmoddi4+0x2aa>
 80003c4:	3b02      	subs	r3, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003cc:	fba0 9302 	umull	r9, r3, r0, r2
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	429c      	cmp	r4, r3
 80003d6:	46c8      	mov	r8, r9
 80003d8:	469e      	mov	lr, r3
 80003da:	d354      	bcc.n	8000486 <__udivmoddi4+0x29a>
 80003dc:	d051      	beq.n	8000482 <__udivmoddi4+0x296>
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d067      	beq.n	80004b2 <__udivmoddi4+0x2c6>
 80003e2:	ebb5 0308 	subs.w	r3, r5, r8
 80003e6:	eb64 040e 	sbc.w	r4, r4, lr
 80003ea:	40cb      	lsrs	r3, r1
 80003ec:	fa04 f707 	lsl.w	r7, r4, r7
 80003f0:	431f      	orrs	r7, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c6 7400 	strd	r7, r4, [r6]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e74a      	b.n	8000292 <__udivmoddi4+0xa6>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0020 	rsb	r0, r3, #32
 8000404:	40c1      	lsrs	r1, r0
 8000406:	409d      	lsls	r5, r3
 8000408:	fa24 f000 	lsr.w	r0, r4, r0
 800040c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000410:	4328      	orrs	r0, r5
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	0c02      	lsrs	r2, r0, #16
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	fa04 f403 	lsl.w	r4, r4, r3
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x256>
 8000430:	eb1c 0202 	adds.w	r2, ip, r2
 8000434:	f105 38ff 	add.w	r8, r5, #4294967295
 8000438:	d22f      	bcs.n	800049a <__udivmoddi4+0x2ae>
 800043a:	4291      	cmp	r1, r2
 800043c:	d92d      	bls.n	800049a <__udivmoddi4+0x2ae>
 800043e:	3d02      	subs	r5, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a52      	subs	r2, r2, r1
 8000444:	fbb2 f1f7 	udiv	r1, r2, r7
 8000448:	fb07 2211 	mls	r2, r7, r1, r2
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000452:	fb01 f20e 	mul.w	r2, r1, lr
 8000456:	4282      	cmp	r2, r0
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x280>
 800045a:	eb1c 0000 	adds.w	r0, ip, r0
 800045e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000462:	d216      	bcs.n	8000492 <__udivmoddi4+0x2a6>
 8000464:	4282      	cmp	r2, r0
 8000466:	d914      	bls.n	8000492 <__udivmoddi4+0x2a6>
 8000468:	3902      	subs	r1, #2
 800046a:	4460      	add	r0, ip
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	e73a      	b.n	80002ea <__udivmoddi4+0xfe>
 8000474:	4631      	mov	r1, r6
 8000476:	4630      	mov	r0, r6
 8000478:	e70b      	b.n	8000292 <__udivmoddi4+0xa6>
 800047a:	4671      	mov	r1, lr
 800047c:	e6e9      	b.n	8000252 <__udivmoddi4+0x66>
 800047e:	4610      	mov	r0, r2
 8000480:	e6fe      	b.n	8000280 <__udivmoddi4+0x94>
 8000482:	454d      	cmp	r5, r9
 8000484:	d2ab      	bcs.n	80003de <__udivmoddi4+0x1f2>
 8000486:	ebb9 0802 	subs.w	r8, r9, r2
 800048a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800048e:	3801      	subs	r0, #1
 8000490:	e7a5      	b.n	80003de <__udivmoddi4+0x1f2>
 8000492:	4641      	mov	r1, r8
 8000494:	e7ea      	b.n	800046c <__udivmoddi4+0x280>
 8000496:	4603      	mov	r3, r0
 8000498:	e796      	b.n	80003c8 <__udivmoddi4+0x1dc>
 800049a:	4645      	mov	r5, r8
 800049c:	e7d1      	b.n	8000442 <__udivmoddi4+0x256>
 800049e:	46d0      	mov	r8, sl
 80004a0:	e77d      	b.n	800039e <__udivmoddi4+0x1b2>
 80004a2:	4464      	add	r4, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e749      	b.n	800033c <__udivmoddi4+0x150>
 80004a8:	3d02      	subs	r5, #2
 80004aa:	4462      	add	r2, ip
 80004ac:	e731      	b.n	8000312 <__udivmoddi4+0x126>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e70a      	b.n	80002c8 <__udivmoddi4+0xdc>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e6ed      	b.n	8000292 <__udivmoddi4+0xa6>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <HAL_UARTEx_RxEventCallback>:
int i = 0;
int j = 0;

void
HAL_UARTEx_RxEventCallback (UART_HandleTypeDef *huart, uint16_t Size)
{
 80004bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	807b      	strh	r3, [r7, #2]

  if (huart->Instance == USART1)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a26      	ldr	r2, [pc, #152]	; (8000568 <HAL_UARTEx_RxEventCallback+0xac>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d143      	bne.n	800055c <HAL_UARTEx_RxEventCallback+0xa0>
    {
      Select = 0x1000;
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <HAL_UARTEx_RxEventCallback+0xb0>)
 80004d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004da:	801a      	strh	r2, [r3, #0]
      i = 0;
 80004dc:	4b24      	ldr	r3, [pc, #144]	; (8000570 <HAL_UARTEx_RxEventCallback+0xb4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
      j = 0;
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <HAL_UARTEx_RxEventCallback+0xb8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
      memcpy (mainRxBuf, rxBuf, Size);
 80004e8:	887b      	ldrh	r3, [r7, #2]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4922      	ldr	r1, [pc, #136]	; (8000578 <HAL_UARTEx_RxEventCallback+0xbc>)
 80004ee:	4823      	ldr	r0, [pc, #140]	; (800057c <HAL_UARTEx_RxEventCallback+0xc0>)
 80004f0:	f002 fcfc 	bl	8002eec <memcpy>
      HAL_UARTEx_ReceiveToIdle_DMA (&huart1, rxBuf, sizeof(rxBuf));
 80004f4:	2204      	movs	r2, #4
 80004f6:	4920      	ldr	r1, [pc, #128]	; (8000578 <HAL_UARTEx_RxEventCallback+0xbc>)
 80004f8:	4821      	ldr	r0, [pc, #132]	; (8000580 <HAL_UARTEx_RxEventCallback+0xc4>)
 80004fa:	f001 fd3d 	bl	8001f78 <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <HAL_UARTEx_RxEventCallback+0xc8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <HAL_UARTEx_RxEventCallback+0xc8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f022 0204 	bic.w	r2, r2, #4
 800050c:	601a      	str	r2, [r3, #0]
      uartSum += atoi (&mainRxBuf);
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <HAL_UARTEx_RxEventCallback+0xc0>)
 8000510:	f002 fc2e 	bl	8002d70 <atoi>
 8000514:	4603      	mov	r3, r0
 8000516:	17da      	asrs	r2, r3, #31
 8000518:	461c      	mov	r4, r3
 800051a:	4615      	mov	r5, r2
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <HAL_UARTEx_RxEventCallback+0xcc>)
 800051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000522:	eb14 0802 	adds.w	r8, r4, r2
 8000526:	eb45 0903 	adc.w	r9, r5, r3
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <HAL_UARTEx_RxEventCallback+0xcc>)
 800052c:	e9c3 8900 	strd	r8, r9, [r3]

      dividToFourDigit = uartSum;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000536:	4915      	ldr	r1, [pc, #84]	; (800058c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000538:	e9c1 2300 	strd	r2, r3, [r1]
      if (uartSum > 9999)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_UARTEx_RxEventCallback+0xcc>)
 800053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000542:	f242 7110 	movw	r1, #10000	; 0x2710
 8000546:	428a      	cmp	r2, r1
 8000548:	f173 0300 	sbcs.w	r3, r3, #0
 800054c:	db06      	blt.n	800055c <HAL_UARTEx_RxEventCallback+0xa0>
	{
	uartSum = 0;
 800054e:	490e      	ldr	r1, [pc, #56]	; (8000588 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000550:	f04f 0200 	mov.w	r2, #0
 8000554:	f04f 0300 	mov.w	r3, #0
 8000558:	e9c1 2300 	strd	r2, r3, [r1]
	}
    }
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000566:	bf00      	nop
 8000568:	40013800 	.word	0x40013800
 800056c:	20000000 	.word	0x20000000
 8000570:	20000120 	.word	0x20000120
 8000574:	20000124 	.word	0x20000124
 8000578:	20000108 	.word	0x20000108
 800057c:	2000010c 	.word	0x2000010c
 8000580:	2000007c 	.word	0x2000007c
 8000584:	200000c4 	.word	0x200000c4
 8000588:	20000118 	.word	0x20000118
 800058c:	20000110 	.word	0x20000110

08000590 <main>:
 * @brief  The application entry point.
 * @retval int
 */
int
main (void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08e      	sub	sp, #56	; 0x38
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init ();
 8000596:	f000 fabd 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config ();
 800059a:	f000 f8c5 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init ();
 800059e:	f000 f947 	bl	8000830 <MX_GPIO_Init>
  MX_DMA_Init ();
 80005a2:	f000 f927 	bl	80007f4 <MX_DMA_Init>
  MX_USART1_UART_Init ();
 80005a6:	f000 f8fb 	bl	80007a0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UARTEx_ReceiveToIdle_DMA (&huart1, rxBuf, sizeof(rxBuf));
 80005aa:	2204      	movs	r2, #4
 80005ac:	4953      	ldr	r1, [pc, #332]	; (80006fc <main+0x16c>)
 80005ae:	4854      	ldr	r0, [pc, #336]	; (8000700 <main+0x170>)
 80005b0:	f001 fce2 	bl	8001f78 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005b4:	4b53      	ldr	r3, [pc, #332]	; (8000704 <main+0x174>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b52      	ldr	r3, [pc, #328]	; (8000704 <main+0x174>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f022 0204 	bic.w	r2, r2, #4
 80005c2:	601a      	str	r2, [r3, #0]
  // when you give any index of an array to digitaWrite you can change many pin with one digitalWrite.
  int segment[] =
 80005c4:	4b50      	ldr	r3, [pc, #320]	; (8000708 <main+0x178>)
 80005c6:	f107 0410 	add.w	r4, r7, #16
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d8:	e884 0003 	stmia.w	r4, {r0, r1}
    { 0b01111110, 0b00001100, 0b10110110, 0b10011110, 0b11001100, 0b11011010,
	0b11111010, 0b00001110, 0b11111110, 0b11011110 };
  // The value of 4 digits of seven segment
  int digit[4] =
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
    { 0 };

  while (1)
    {
      memset (rxBuf, 0, sizeof(rxBuf));
 80005e8:	2204      	movs	r2, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4843      	ldr	r0, [pc, #268]	; (80006fc <main+0x16c>)
 80005ee:	f002 fc4b 	bl	8002e88 <memset>
      memset (mainRxBuf, 0, sizeof(mainRxBuf));
 80005f2:	2204      	movs	r2, #4
 80005f4:	2100      	movs	r1, #0
 80005f6:	4845      	ldr	r0, [pc, #276]	; (800070c <main+0x17c>)
 80005f8:	f002 fc46 	bl	8002e88 <memset>

      if (dividToFourDigit > 9999)
 80005fc:	4b44      	ldr	r3, [pc, #272]	; (8000710 <main+0x180>)
 80005fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000602:	f242 7110 	movw	r1, #10000	; 0x2710
 8000606:	428a      	cmp	r2, r1
 8000608:	f173 0300 	sbcs.w	r3, r3, #0
 800060c:	db33      	blt.n	8000676 <main+0xe6>
	{
	  dividToFourDigit = 0;
 800060e:	4940      	ldr	r1, [pc, #256]	; (8000710 <main+0x180>)
 8000610:	f04f 0200 	mov.w	r2, #0
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	e9c1 2300 	strd	r2, r3, [r1]
	  memset (digit, 0, sizeof(digit));
 800061c:	463b      	mov	r3, r7
 800061e:	2210      	movs	r2, #16
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fc30 	bl	8002e88 <memset>
	}

      // This while take the full number and divide it to four digit in digit[i] array.
      // At the end
      while (dividToFourDigit > 0)
 8000628:	e025      	b.n	8000676 <main+0xe6>
	{
	  digit[i] = dividToFourDigit % 10;
 800062a:	4b39      	ldr	r3, [pc, #228]	; (8000710 <main+0x180>)
 800062c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000630:	f04f 020a 	mov.w	r2, #10
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	f7ff fd88 	bl	800014c <__aeabi_ldivmod>
 800063c:	4610      	mov	r0, r2
 800063e:	4619      	mov	r1, r3
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <main+0x184>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4602      	mov	r2, r0
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	3338      	adds	r3, #56	; 0x38
 800064a:	443b      	add	r3, r7
 800064c:	f843 2c38 	str.w	r2, [r3, #-56]
	  dividToFourDigit = dividToFourDigit / 10;
 8000650:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <main+0x180>)
 8000652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000656:	f04f 020a 	mov.w	r2, #10
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	f7ff fd75 	bl	800014c <__aeabi_ldivmod>
 8000662:	4602      	mov	r2, r0
 8000664:	460b      	mov	r3, r1
 8000666:	492a      	ldr	r1, [pc, #168]	; (8000710 <main+0x180>)
 8000668:	e9c1 2300 	strd	r2, r3, [r1]
	  i++;
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <main+0x184>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	4a28      	ldr	r2, [pc, #160]	; (8000714 <main+0x184>)
 8000674:	6013      	str	r3, [r2, #0]
      while (dividToFourDigit > 0)
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <main+0x180>)
 8000678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800067c:	2a01      	cmp	r2, #1
 800067e:	f173 0300 	sbcs.w	r3, r3, #0
 8000682:	dad2      	bge.n	800062a <main+0x9a>
	}
      HAL_Delay (3);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 faa7 	bl	8000bd8 <HAL_Delay>
      MX_GPIO_Init ();
 800068a:	f000 f8d1 	bl	8000830 <MX_GPIO_Init>
      HAL_GPIO_WritePin (GPIOB, Select, 1);
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <main+0x188>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	2201      	movs	r2, #1
 8000694:	4619      	mov	r1, r3
 8000696:	4821      	ldr	r0, [pc, #132]	; (800071c <main+0x18c>)
 8000698:	f000 fff6 	bl	8001688 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin (GPIOA, segment[digit[j]], 1);
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <main+0x190>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	3338      	adds	r3, #56	; 0x38
 80006a4:	443b      	add	r3, r7
 80006a6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	3338      	adds	r3, #56	; 0x38
 80006ae:	443b      	add	r3, r7
 80006b0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	481a      	ldr	r0, [pc, #104]	; (8000724 <main+0x194>)
 80006bc:	f000 ffe4 	bl	8001688 <HAL_GPIO_WritePin>
      j++;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <main+0x190>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <main+0x190>)
 80006c8:	6013      	str	r3, [r2, #0]
      if (j > 3)
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <main+0x190>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	dd02      	ble.n	80006d8 <main+0x148>
	j = 0;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <main+0x190>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
      if (Select == 0x8000)
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <main+0x188>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006e0:	d104      	bne.n	80006ec <main+0x15c>
	{
	  Select = 0x1000;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <main+0x188>)
 80006e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006e8:	801a      	strh	r2, [r3, #0]
	  continue;
 80006ea:	e005      	b.n	80006f8 <main+0x168>
	}
      // Toggle between select pin of four digit seven segment
      Select = Select << 1;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <main+0x188>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <main+0x188>)
 80006f6:	801a      	strh	r2, [r3, #0]
      memset (rxBuf, 0, sizeof(rxBuf));
 80006f8:	e776      	b.n	80005e8 <main+0x58>
 80006fa:	bf00      	nop
 80006fc:	20000108 	.word	0x20000108
 8000700:	2000007c 	.word	0x2000007c
 8000704:	200000c4 	.word	0x200000c4
 8000708:	08002f20 	.word	0x08002f20
 800070c:	2000010c 	.word	0x2000010c
 8000710:	20000110 	.word	0x20000110
 8000714:	20000120 	.word	0x20000120
 8000718:	20000000 	.word	0x20000000
 800071c:	40010c00 	.word	0x40010c00
 8000720:	20000124 	.word	0x20000124
 8000724:	40010800 	.word	0x40010800

08000728 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void
SystemClock_Config (void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b090      	sub	sp, #64	; 0x40
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fba6 	bl	8002e88 <memset>
    { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
    { 0 };

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2310      	movs	r3, #16
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	4618      	mov	r0, r3
 8000760:	f000 ffaa 	bl	80016b8 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x46>
    {
      Error_Handler ();
 800076a:	f000 f8c1 	bl	80008f0 <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fa18 	bl	8001bbc <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x6e>
    {
      Error_Handler ();
 8000792:	f000 f8ad 	bl	80008f0 <Error_Handler>
    }
}
 8000796:	bf00      	nop
 8000798:	3740      	adds	r7, #64	; 0x40
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_USART1_UART_Init>:
 * @param None
 * @retval None
 */
static void
MX_USART1_UART_Init (void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART1_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init (&huart1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d8:	f001 fb7e 	bl	8001ed8 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x46>
    {
      Error_Handler ();
 80007e2:	f000 f885 	bl	80008f0 <Error_Handler>
    }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000007c 	.word	0x2000007c
 80007f0:	40013800 	.word	0x40013800

080007f4 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 */
static void
MX_DMA_Init (void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_DMA_Init+0x38>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <MX_DMA_Init+0x38>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_DMA_Init+0x38>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority (DMA1_Channel5_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	200f      	movs	r0, #15
 8000818:	f000 fad9 	bl	8000dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (DMA1_Channel5_IRQn);
 800081c:	200f      	movs	r0, #15
 800081e:	f000 faf2 	bl	8000e06 <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <MX_GPIO_Init>:
 * @param None
 * @retval None
 */
static void
MX_GPIO_Init (void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct =
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
    { 0 };
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <MX_GPIO_Init+0xb4>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_GPIO_Init+0xb4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_GPIO_Init+0xb4>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin (
 8000874:	2200      	movs	r2, #0
 8000876:	21fe      	movs	r1, #254	; 0xfe
 8000878:	481b      	ldr	r0, [pc, #108]	; (80008e8 <MX_GPIO_Init+0xb8>)
 800087a:	f000 ff05 	bl	8001688 <HAL_GPIO_WritePin>
      GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
	  | GPIO_PIN_6 | GPIO_PIN_7,
      GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin (GPIOB,
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000884:	4819      	ldr	r0, [pc, #100]	; (80008ec <MX_GPIO_Init+0xbc>)
 8000886:	f000 feff 	bl	8001688 <HAL_GPIO_WritePin>
  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
		     GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
   PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 800088a:	23fe      	movs	r3, #254	; 0xfe
 800088c:	60bb      	str	r3, [r7, #8]
      | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_GPIO_Init+0xb8>)
 80008a2:	f000 fd6d 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_GPIO_Init+0xbc>)
 80008ba:	f000 fd61 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80008be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2302      	movs	r3, #2
 80008ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_GPIO_Init+0xbc>)
 80008d8:	f000 fd52 	bl	8001380 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010800 	.word	0x40010800
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void
Error_Handler (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/**
 * Initializes the Global MSP.
 */
void
HAL_MspInit (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x40>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_MspInit+0x40>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x40>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x40>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_MspInit+0x40>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_MspInit+0x40>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_UART_MspInit>:
 * @param huart: UART handle pointer
 * @retval None
 */
void
HAL_UART_MspInit (UART_HandleTypeDef *huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct =
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
    { 0 };
  if (huart->Instance == USART1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a33      	ldr	r2, [pc, #204]	; (8000a28 <HAL_UART_MspInit+0xe8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d15f      	bne.n	8000a20 <HAL_UART_MspInit+0xe0>
    {
      /* USER CODE BEGIN USART1_MspInit 0 */

      /* USER CODE END USART1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_USART1_CLK_ENABLE();
 8000960:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <HAL_UART_MspInit+0xec>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <HAL_UART_MspInit+0xec>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <HAL_UART_MspInit+0xec>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <HAL_UART_MspInit+0xec>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a2b      	ldr	r2, [pc, #172]	; (8000a2c <HAL_UART_MspInit+0xec>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_UART_MspInit+0xec>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
      /**USART1 GPIO Configuration
       PA9     ------> USART1_TX
       PA10     ------> USART1_RX
       */
      GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000994:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4822      	ldr	r0, [pc, #136]	; (8000a30 <HAL_UART_MspInit+0xf0>)
 80009a6:	f000 fceb 	bl	8001380 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
      HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	481c      	ldr	r0, [pc, #112]	; (8000a30 <HAL_UART_MspInit+0xf0>)
 80009c0:	f000 fcde 	bl	8001380 <HAL_GPIO_Init>

      /* USART1 DMA Init */
      /* USART1_RX Init */
      hdma_usart1_rx.Instance = DMA1_Channel5;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <HAL_UART_MspInit+0xf8>)
 80009c8:	601a      	str	r2, [r3, #0]
      hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
      hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
      hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	60da      	str	r2, [r3, #12]
      hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
      hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
      hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
      hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
      if (HAL_DMA_Init (&hdma_usart1_rx) != HAL_OK)
 80009f4:	480f      	ldr	r0, [pc, #60]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 80009f6:	f000 fa21 	bl	8000e3c <HAL_DMA_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0xc4>
	{
	  Error_Handler ();
 8000a00:	f7ff ff76 	bl	80008f0 <Error_Handler>
	}

      __HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_UART_MspInit+0xf4>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6253      	str	r3, [r2, #36]	; 0x24

      /* USART1 interrupt Init */
      HAL_NVIC_SetPriority (USART1_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2025      	movs	r0, #37	; 0x25
 8000a16:	f000 f9da 	bl	8000dce <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ (USART1_IRQn);
 8000a1a:	2025      	movs	r0, #37	; 0x25
 8000a1c:	f000 f9f3 	bl	8000e06 <HAL_NVIC_EnableIRQ>
      /* USER CODE BEGIN USART1_MspInit 1 */

      /* USER CODE END USART1_MspInit 1 */
    }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800
 8000a34:	200000c4 	.word	0x200000c4
 8000a38:	40020058 	.word	0x40020058

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		if (1 == 1)
			break;
 8000a46:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f889 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA1_Channel5_IRQHandler+0x10>)
 8000a9a:	f000 fb3d 	bl	8001118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000c4 	.word	0x200000c4

08000aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART1_IRQHandler+0x10>)
 8000aae:	f001 fac1 	bl	8002034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000007c 	.word	0x2000007c

08000abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff fff8 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ace:	490c      	ldr	r1, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae4:	4c09      	ldr	r4, [pc, #36]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 f9d7 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fd4b 	bl	8000590 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b04:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 8000b08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b0c:	20000264 	.word	0x20000264

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_Init (void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping (NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f947 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit ();
 8000b30:	f7ff fee4 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef
HAL_InitTick (uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config (SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f95f 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
    {
      return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
    {
      HAL_NVIC_SetPriority (SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f927 	bl	8000dce <HAL_NVIC_SetPriority>
      uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
    {
      return HAL_ERROR;
    }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
      return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000004 	.word	0x20000004
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_IncTick>:
 *      implementations in user file.
 * @retval None
 */
__weak void
HAL_IncTick (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	2000000c 	.word	0x2000000c
 8000bc0:	20000128 	.word	0x20000128

08000bc4 <HAL_GetTick>:
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t
HAL_GetTick (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000128 	.word	0x20000128

08000bd8 <HAL_Delay>:
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void
HAL_Delay (uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick ();
 8000be0:	f7ff fff0 	bl	8000bc4 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
    {
      wait += (uint32_t) (uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
    }

  while ((HAL_GetTick () - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffe0 	bl	8000bc4 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
    {
    }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000000c 	.word	0x2000000c

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <__NVIC_EnableIRQ+0x34>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff90 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void
HAL_NVIC_SetPriorityGrouping (uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping (PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff2d 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
 * @retval None
 */
void
HAL_NVIC_SetPriority (IRQn_Type IRQn, uint32_t PreemptPriority,
		      uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping ();
 8000de0:	f7ff ff42 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority (
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff90 	bl	8000d10 <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5f 	bl	8000cbc <__NVIC_SetPriority>
      IRQn, NVIC_EncodePriority (prioritygroup, PreemptPriority, SubPriority));
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
 * @retval None
 */
void
HAL_NVIC_EnableIRQ (IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ (IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff35 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t
HAL_SYSTICK_Config (uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  return SysTick_Config (TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e043      	b.n	8000eda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <HAL_DMA_Init+0xa8>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_DMA_Init+0xac>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	009a      	lsls	r2, r3, #2
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_DMA_Init+0xb0>)
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2202      	movs	r2, #2
 8000e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	bffdfff8 	.word	0xbffdfff8
 8000ee8:	cccccccd 	.word	0xcccccccd
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_DMA_Start_IT+0x20>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e04b      	b.n	8000fa8 <HAL_DMA_Start_IT+0xb8>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d13a      	bne.n	8000f9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2202      	movs	r2, #2
 8000f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0201 	bic.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 f9eb 	bl	8001324 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 020e 	orr.w	r2, r2, #14
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00f      	b.n	8000f88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 020a 	orr.w	r2, r2, #10
 8000f86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0201 	orr.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e005      	b.n	8000fa6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d008      	beq.n	8000fda <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e020      	b.n	800101c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 020e 	bic.w	r2, r2, #14
 8000fe8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d005      	beq.n	800104c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2204      	movs	r2, #4
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e051      	b.n	80010f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 020e 	bic.w	r2, r2, #14
 800105a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <HAL_DMA_Abort_IT+0xd4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d029      	beq.n	80010ca <HAL_DMA_Abort_IT+0xa2>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_DMA_Abort_IT+0xd8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d022      	beq.n	80010c6 <HAL_DMA_Abort_IT+0x9e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <HAL_DMA_Abort_IT+0xdc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d01a      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x98>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_DMA_Abort_IT+0xe0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d012      	beq.n	80010ba <HAL_DMA_Abort_IT+0x92>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_DMA_Abort_IT+0xe4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00a      	beq.n	80010b4 <HAL_DMA_Abort_IT+0x8c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_DMA_Abort_IT+0xe8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d102      	bne.n	80010ae <HAL_DMA_Abort_IT+0x86>
 80010a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010ac:	e00e      	b.n	80010cc <HAL_DMA_Abort_IT+0xa4>
 80010ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b2:	e00b      	b.n	80010cc <HAL_DMA_Abort_IT+0xa4>
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	e008      	b.n	80010cc <HAL_DMA_Abort_IT+0xa4>
 80010ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010be:	e005      	b.n	80010cc <HAL_DMA_Abort_IT+0xa4>
 80010c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c4:	e002      	b.n	80010cc <HAL_DMA_Abort_IT+0xa4>
 80010c6:	2310      	movs	r3, #16
 80010c8:	e000      	b.n	80010cc <HAL_DMA_Abort_IT+0xa4>
 80010ca:	2301      	movs	r3, #1
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_DMA_Abort_IT+0xec>)
 80010ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
    } 
  }
  return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020008 	.word	0x40020008
 8001100:	4002001c 	.word	0x4002001c
 8001104:	40020030 	.word	0x40020030
 8001108:	40020044 	.word	0x40020044
 800110c:	40020058 	.word	0x40020058
 8001110:	4002006c 	.word	0x4002006c
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2204      	movs	r2, #4
 8001136:	409a      	lsls	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d04f      	beq.n	80011e0 <HAL_DMA_IRQHandler+0xc8>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b00      	cmp	r3, #0
 8001148:	d04a      	beq.n	80011e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	2b00      	cmp	r3, #0
 8001156:	d107      	bne.n	8001168 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0204 	bic.w	r2, r2, #4
 8001166:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a66      	ldr	r2, [pc, #408]	; (8001308 <HAL_DMA_IRQHandler+0x1f0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d029      	beq.n	80011c6 <HAL_DMA_IRQHandler+0xae>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a65      	ldr	r2, [pc, #404]	; (800130c <HAL_DMA_IRQHandler+0x1f4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d022      	beq.n	80011c2 <HAL_DMA_IRQHandler+0xaa>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a63      	ldr	r2, [pc, #396]	; (8001310 <HAL_DMA_IRQHandler+0x1f8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01a      	beq.n	80011bc <HAL_DMA_IRQHandler+0xa4>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a62      	ldr	r2, [pc, #392]	; (8001314 <HAL_DMA_IRQHandler+0x1fc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d012      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x9e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a60      	ldr	r2, [pc, #384]	; (8001318 <HAL_DMA_IRQHandler+0x200>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x98>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a5f      	ldr	r2, [pc, #380]	; (800131c <HAL_DMA_IRQHandler+0x204>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d102      	bne.n	80011aa <HAL_DMA_IRQHandler+0x92>
 80011a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a8:	e00e      	b.n	80011c8 <HAL_DMA_IRQHandler+0xb0>
 80011aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011ae:	e00b      	b.n	80011c8 <HAL_DMA_IRQHandler+0xb0>
 80011b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011b4:	e008      	b.n	80011c8 <HAL_DMA_IRQHandler+0xb0>
 80011b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ba:	e005      	b.n	80011c8 <HAL_DMA_IRQHandler+0xb0>
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c0:	e002      	b.n	80011c8 <HAL_DMA_IRQHandler+0xb0>
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	e000      	b.n	80011c8 <HAL_DMA_IRQHandler+0xb0>
 80011c6:	2304      	movs	r3, #4
 80011c8:	4a55      	ldr	r2, [pc, #340]	; (8001320 <HAL_DMA_IRQHandler+0x208>)
 80011ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8094 	beq.w	80012fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011de:	e08e      	b.n	80012fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2202      	movs	r2, #2
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d056      	beq.n	800129e <HAL_DMA_IRQHandler+0x186>
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d051      	beq.n	800129e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10b      	bne.n	8001220 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020a 	bic.w	r2, r2, #10
 8001216:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a38      	ldr	r2, [pc, #224]	; (8001308 <HAL_DMA_IRQHandler+0x1f0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d029      	beq.n	800127e <HAL_DMA_IRQHandler+0x166>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a37      	ldr	r2, [pc, #220]	; (800130c <HAL_DMA_IRQHandler+0x1f4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d022      	beq.n	800127a <HAL_DMA_IRQHandler+0x162>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a35      	ldr	r2, [pc, #212]	; (8001310 <HAL_DMA_IRQHandler+0x1f8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01a      	beq.n	8001274 <HAL_DMA_IRQHandler+0x15c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a34      	ldr	r2, [pc, #208]	; (8001314 <HAL_DMA_IRQHandler+0x1fc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d012      	beq.n	800126e <HAL_DMA_IRQHandler+0x156>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_DMA_IRQHandler+0x200>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x150>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_DMA_IRQHandler+0x204>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d102      	bne.n	8001262 <HAL_DMA_IRQHandler+0x14a>
 800125c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001260:	e00e      	b.n	8001280 <HAL_DMA_IRQHandler+0x168>
 8001262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001266:	e00b      	b.n	8001280 <HAL_DMA_IRQHandler+0x168>
 8001268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126c:	e008      	b.n	8001280 <HAL_DMA_IRQHandler+0x168>
 800126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001272:	e005      	b.n	8001280 <HAL_DMA_IRQHandler+0x168>
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	e002      	b.n	8001280 <HAL_DMA_IRQHandler+0x168>
 800127a:	2320      	movs	r3, #32
 800127c:	e000      	b.n	8001280 <HAL_DMA_IRQHandler+0x168>
 800127e:	2302      	movs	r3, #2
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <HAL_DMA_IRQHandler+0x208>)
 8001282:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d034      	beq.n	80012fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800129c:	e02f      	b.n	80012fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	2208      	movs	r2, #8
 80012a4:	409a      	lsls	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d028      	beq.n	8001300 <HAL_DMA_IRQHandler+0x1e8>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d023      	beq.n	8001300 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 020e 	bic.w	r2, r2, #14
 80012c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
    }
  }
  return;
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
}
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40020008 	.word	0x40020008
 800130c:	4002001c 	.word	0x4002001c
 8001310:	40020030 	.word	0x40020030
 8001314:	40020044 	.word	0x40020044
 8001318:	40020058 	.word	0x40020058
 800131c:	4002006c 	.word	0x4002006c
 8001320:	40020000 	.word	0x40020000

08001324 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b10      	cmp	r3, #16
 8001350:	d108      	bne.n	8001364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001362:	e007      	b.n	8001374 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
	...

08001380 <HAL_GPIO_Init>:
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void
HAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b08b      	sub	sp, #44	; 0x2c
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	e169      	b.n	8001668 <HAL_GPIO_Init+0x2e8>
    {
      /* Get the IO position */
      ioposition = (0x01uL << position);
 8001394:	2201      	movs	r2, #1
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	61fb      	str	r3, [r7, #28]

      /* Get the current IO position */
      iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]

      if (iocurrent == ioposition)
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f040 8158 	bne.w	8001662 <HAL_GPIO_Init+0x2e2>
	{
	  /* Check the Alternate function parameters */
	  assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

	  /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
	  switch (GPIO_Init->Mode)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a9a      	ldr	r2, [pc, #616]	; (8001620 <HAL_GPIO_Init+0x2a0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d05e      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013bc:	4a98      	ldr	r2, [pc, #608]	; (8001620 <HAL_GPIO_Init+0x2a0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d875      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013c2:	4a98      	ldr	r2, [pc, #608]	; (8001624 <HAL_GPIO_Init+0x2a4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d058      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013c8:	4a96      	ldr	r2, [pc, #600]	; (8001624 <HAL_GPIO_Init+0x2a4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d86f      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013ce:	4a96      	ldr	r2, [pc, #600]	; (8001628 <HAL_GPIO_Init+0x2a8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d052      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013d4:	4a94      	ldr	r2, [pc, #592]	; (8001628 <HAL_GPIO_Init+0x2a8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d869      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013da:	4a94      	ldr	r2, [pc, #592]	; (800162c <HAL_GPIO_Init+0x2ac>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d04c      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013e0:	4a92      	ldr	r2, [pc, #584]	; (800162c <HAL_GPIO_Init+0x2ac>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d863      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013e6:	4a92      	ldr	r2, [pc, #584]	; (8001630 <HAL_GPIO_Init+0x2b0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d046      	beq.n	800147a <HAL_GPIO_Init+0xfa>
 80013ec:	4a90      	ldr	r2, [pc, #576]	; (8001630 <HAL_GPIO_Init+0x2b0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d85d      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d82a      	bhi.n	800144c <HAL_GPIO_Init+0xcc>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d859      	bhi.n	80014ae <HAL_GPIO_Init+0x12e>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_GPIO_Init+0x80>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	0800147b 	.word	0x0800147b
 8001404:	08001455 	.word	0x08001455
 8001408:	08001467 	.word	0x08001467
 800140c:	080014a9 	.word	0x080014a9
 8001410:	080014af 	.word	0x080014af
 8001414:	080014af 	.word	0x080014af
 8001418:	080014af 	.word	0x080014af
 800141c:	080014af 	.word	0x080014af
 8001420:	080014af 	.word	0x080014af
 8001424:	080014af 	.word	0x080014af
 8001428:	080014af 	.word	0x080014af
 800142c:	080014af 	.word	0x080014af
 8001430:	080014af 	.word	0x080014af
 8001434:	080014af 	.word	0x080014af
 8001438:	080014af 	.word	0x080014af
 800143c:	080014af 	.word	0x080014af
 8001440:	080014af 	.word	0x080014af
 8001444:	0800145d 	.word	0x0800145d
 8001448:	08001471 	.word	0x08001471
 800144c:	4a79      	ldr	r2, [pc, #484]	; (8001634 <HAL_GPIO_Init+0x2b4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0xfa>
	      config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
	      break;

	      /* Parameters are checked with assert_param */
	    default:
	      break;
 8001452:	e02c      	b.n	80014ae <HAL_GPIO_Init+0x12e>
	      config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	623b      	str	r3, [r7, #32]
	      break;
 800145a:	e029      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	3304      	adds	r3, #4
 8001462:	623b      	str	r3, [r7, #32]
	      break;
 8001464:	e024      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	3308      	adds	r3, #8
 800146c:	623b      	str	r3, [r7, #32]
	      break;
 800146e:	e01f      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	623b      	str	r3, [r7, #32]
	      break;
 8001478:	e01a      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      if (GPIO_Init->Pull == GPIO_NOPULL)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_GPIO_Init+0x108>
		  config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001482:	2304      	movs	r3, #4
 8001484:	623b      	str	r3, [r7, #32]
	      break;
 8001486:	e013      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_GPIO_Init+0x11c>
		  config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
		  GPIOx->BSRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	611a      	str	r2, [r3, #16]
	      break;
 800149a:	e009      	b.n	80014b0 <HAL_GPIO_Init+0x130>
		  config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
		  GPIOx->BRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	615a      	str	r2, [r3, #20]
	      break;
 80014a6:	e003      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
	      break;
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x130>
	      break;
 80014ae:	bf00      	nop
	    }

	  /* Check if the current bit belongs to first half or last half of the pin count number
	   in order to address CRH or CRL register*/
	  configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d801      	bhi.n	80014ba <HAL_GPIO_Init+0x13a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_Init+0x13e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	617b      	str	r3, [r7, #20]
	  registeroffset =
	      (iocurrent < GPIO_PIN_8) ?
		  (position << 2u) : ((position - 8u) << 2u);
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d802      	bhi.n	80014cc <HAL_GPIO_Init+0x14c>
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x152>
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	3b08      	subs	r3, #8
 80014d0:	009b      	lsls	r3, r3, #2
	  registeroffset =
 80014d2:	613b      	str	r3, [r7, #16]

	  /* Apply the new configuration of the pin to the register */
	  MODIFY_REG((*configregister),
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	210f      	movs	r1, #15
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	401a      	ands	r2, r3
 80014e4:	6a39      	ldr	r1, [r7, #32]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	431a      	orrs	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	601a      	str	r2, [r3, #0]
		     ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
		     (config << registeroffset));

	  /*--------------------- EXTI Mode Configuration ------------------------*/
	  /* Configure the External Interrupt or event for the current IO */
	  if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80b1 	beq.w	8001662 <HAL_GPIO_Init+0x2e2>
	    {
	      /* Enable AFIO Clock */
	      __HAL_RCC_AFIO_CLK_ENABLE();
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_GPIO_Init+0x2b8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x2b8>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_GPIO_Init+0x2b8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
	      temp = AFIO->EXTICR[position >> 2u];
 8001518:	4a48      	ldr	r2, [pc, #288]	; (800163c <HAL_GPIO_Init+0x2bc>)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001524:	60fb      	str	r3, [r7, #12]
	      CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
	      SET_BIT(temp,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a40      	ldr	r2, [pc, #256]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_GPIO_Init+0x1ec>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <HAL_GPIO_Init+0x2c4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00d      	beq.n	8001568 <HAL_GPIO_Init+0x1e8>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a3e      	ldr	r2, [pc, #248]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d007      	beq.n	8001564 <HAL_GPIO_Init+0x1e4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3d      	ldr	r2, [pc, #244]	; (800164c <HAL_GPIO_Init+0x2cc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_GPIO_Init+0x1e0>
 800155c:	2303      	movs	r3, #3
 800155e:	e006      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 8001560:	2304      	movs	r3, #4
 8001562:	e004      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 8001564:	2302      	movs	r3, #2
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_GPIO_Init+0x1ee>
 800156c:	2300      	movs	r3, #0
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4093      	lsls	r3, r2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
		      (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
	      AFIO->EXTICR[position >> 2u] = temp;
 800157e:	492f      	ldr	r1, [pc, #188]	; (800163c <HAL_GPIO_Init+0x2bc>)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	      /* Enable or disable the rising trigger */
	      if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
		{
		  SET_BIT(EXTI->RTSR, iocurrent);
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	492c      	ldr	r1, [pc, #176]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x234>
		}
	      else
		{
		  CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4928      	ldr	r1, [pc, #160]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
		}

	      /* Enable or disable the falling trigger */
	      if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x24e>
		{
		  SET_BIT(EXTI->FTSR, iocurrent);
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	4922      	ldr	r1, [pc, #136]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x25c>
		}
	      else
		{
		  CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	491e      	ldr	r1, [pc, #120]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	60cb      	str	r3, [r1, #12]
		}

	      /* Configure the event mask */
	      if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x276>
		{
		  SET_BIT(EXTI->EMR, iocurrent);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4918      	ldr	r1, [pc, #96]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x284>
		}
	      else
		{
		  CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4914      	ldr	r1, [pc, #80]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
		}

	      /* Configure the interrupt mask */
	      if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d021      	beq.n	8001654 <HAL_GPIO_Init+0x2d4>
		{
		  SET_BIT(EXTI->IMR, iocurrent);
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e021      	b.n	8001662 <HAL_GPIO_Init+0x2e2>
 800161e:	bf00      	nop
 8001620:	10320000 	.word	0x10320000
 8001624:	10310000 	.word	0x10310000
 8001628:	10220000 	.word	0x10220000
 800162c:	10210000 	.word	0x10210000
 8001630:	10120000 	.word	0x10120000
 8001634:	10110000 	.word	0x10110000
 8001638:	40021000 	.word	0x40021000
 800163c:	40010000 	.word	0x40010000
 8001640:	40010800 	.word	0x40010800
 8001644:	40010c00 	.word	0x40010c00
 8001648:	40011000 	.word	0x40011000
 800164c:	40011400 	.word	0x40011400
 8001650:	40010400 	.word	0x40010400
		}
	      else
		{
		  CLEAR_BIT(EXTI->IMR, iocurrent);
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_GPIO_Init+0x304>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	43db      	mvns	r3, r3
 800165c:	4909      	ldr	r1, [pc, #36]	; (8001684 <HAL_GPIO_Init+0x304>)
 800165e:	4013      	ands	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
		}
	    }
	}

      position++;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3301      	adds	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f47f ae8e 	bne.w	8001394 <HAL_GPIO_Init+0x14>
    }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	372c      	adds	r7, #44	; 0x2c
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
 * @retval None
 */
void
HAL_GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		   GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
    {
      GPIOx->BSRR = GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
    }
  else
    {
      GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
    }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x26>
      GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e272      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8087 	beq.w	80017e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e4:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d112      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
 80016f0:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d10b      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	4b89      	ldr	r3, [pc, #548]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x12c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d168      	bne.n	80017e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e24c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x76>
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a77      	ldr	r2, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0xbc>
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a71      	ldr	r2, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001774:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fa16 	bl	8000bc4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fa12 	bl	8000bc4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e200      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xe4>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa02 	bl	8000bc4 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff f9fe 	bl	8000bc4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1ec      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x10c>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1c0      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4939      	ldr	r1, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff f9b7 	bl	8000bc4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff f9b3 	bl	8000bc4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1a1      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff f996 	bl	8000bc4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff f992 	bl	8000bc4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e180      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d03a      	beq.n	800193c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d019      	beq.n	8001902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x274>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff f976 	bl	8000bc4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff f972 	bl	8000bc4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e160      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 face 	bl	8001e9c <RCC_Delay>
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x274>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff f95c 	bl	8000bc4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff f958 	bl	8000bc4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d908      	bls.n	8001930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e146      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	42420000 	.word	0x42420000
 800192c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e9      	bne.n	8001910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a6 	beq.w	8001a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b85      	ldr	r3, [pc, #532]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b82      	ldr	r3, [pc, #520]	; (8001b80 <HAL_RCC_OscConfig+0x4c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x4c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7e      	ldr	r2, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x4c8>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f919 	bl	8000bc4 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff f915 	bl	8000bc4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e103      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4c8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x312>
 80019bc:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a6e      	ldr	r2, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x334>
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a69      	ldr	r2, [pc, #420]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a66      	ldr	r2, [pc, #408]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x356>
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a60      	ldr	r2, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a57      	ldr	r2, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f8c9 	bl	8000bc4 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff f8c5 	bl	8000bc4 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0b1      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x37e>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8b3 	bl	8000bc4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f8af 	bl	8000bc4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e09b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a3b      	ldr	r2, [pc, #236]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8087 	beq.w	8001bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d061      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d146      	bne.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f883 	bl	8000bc4 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f87f 	bl	8000bc4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e06d      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4921      	ldr	r1, [pc, #132]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a19      	ldr	r1, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	491b      	ldr	r1, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f853 	bl	8000bc4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f84f 	bl	8000bc4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e03d      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46a>
 8001b40:	e035      	b.n	8001bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_RCC_OscConfig+0x4cc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f83c 	bl	8000bc4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f838 	bl	8000bc4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e026      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x498>
 8001b6e:	e01e      	b.n	8001bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e019      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_OscConfig+0x500>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d0      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4965      	ldr	r1, [pc, #404]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0b8      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	494d      	ldr	r1, [pc, #308]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d040      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d115      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e07f      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e073      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e06b      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4936      	ldr	r1, [pc, #216]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cac:	f7fe ff8a 	bl	8000bc4 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7fe ff86 	bl	8000bc4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e053      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d210      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 0207 	bic.w	r2, r3, #7
 8001cf2:	4922      	ldr	r1, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e032      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4916      	ldr	r1, [pc, #88]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	490e      	ldr	r1, [pc, #56]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4a:	f000 f821 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	490a      	ldr	r1, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5c:	5ccb      	ldrb	r3, [r1, r3]
 8001d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1cc>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1d0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fee8 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08002f48 	.word	0x08002f48
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	20000008 	.word	0x20000008

08001d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dbe:	e027      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc2:	613b      	str	r3, [r7, #16]
      break;
 8001dc4:	e027      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	0c9b      	lsrs	r3, r3, #18
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	0c5b      	lsrs	r3, r3, #17
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e004      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e12:	613b      	str	r3, [r7, #16]
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	693b      	ldr	r3, [r7, #16]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	007a1200 	.word	0x007a1200
 8001e2c:	08002f60 	.word	0x08002f60
 8001e30:	08002f70 	.word	0x08002f70
 8001e34:	003d0900 	.word	0x003d0900

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e50:	f7ff fff2 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08002f58 	.word	0x08002f58

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4903      	ldr	r1, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08002f58 	.word	0x08002f58

08001e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <RCC_Delay+0x34>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <RCC_Delay+0x38>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0a5b      	lsrs	r3, r3, #9
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb8:	bf00      	nop
  }
  while (Delay --);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	60fa      	str	r2, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <RCC_Delay+0x1c>
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	10624dd3 	.word	0x10624dd3

08001ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e042      	b.n	8001f70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fd1e 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fe99 	bl	8002c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	; 0x30
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d14a      	bne.n	8002028 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e043      	b.n	800202a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fbf1 	bl	800279c <UART_Start_Receive_DMA>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d12c      	bne.n	8002022 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d125      	bne.n	800201c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	e853 3f00 	ldrex	r3, [r3]
 8001ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
 8002004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002006:	627a      	str	r2, [r7, #36]	; 0x24
 8002008:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200a:	6a39      	ldr	r1, [r7, #32]
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	e841 2300 	strex	r3, r2, [r1]
 8002012:	61fb      	str	r3, [r7, #28]
   return(result);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800201a:	e002      	b.n	8002022 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002026:	e000      	b.n	800202a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3730      	adds	r7, #48	; 0x30
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0ba      	sub	sp, #232	; 0xe8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800207a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_UART_IRQHandler+0x66>
 8002086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fd20 	bl	8002ad8 <UART_Receive_IT>
      return;
 8002098:	e25b      	b.n	8002552 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800209a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80de 	beq.w	8002260 <HAL_UART_IRQHandler+0x22c>
 80020a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80d1 	beq.w	8002260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_UART_IRQHandler+0xae>
 80020ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_UART_IRQHandler+0xd2>
 80020ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f043 0202 	orr.w	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_UART_IRQHandler+0xf6>
 8002112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f043 0204 	orr.w	r2, r3, #4
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800212a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d011      	beq.n	800215a <HAL_UART_IRQHandler+0x126>
 8002136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f043 0208 	orr.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 81f2 	beq.w	8002548 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_UART_IRQHandler+0x14e>
 8002170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fcab 	bl	8002ad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <HAL_UART_IRQHandler+0x17a>
 80021a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04f      	beq.n	800224e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fbb5 	bl	800291e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d041      	beq.n	8002246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3314      	adds	r3, #20
 80021c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021d0:	e853 3f00 	ldrex	r3, [r3]
 80021d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3314      	adds	r3, #20
 80021ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021fe:	e841 2300 	strex	r3, r2, [r1]
 8002202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1d9      	bne.n	80021c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d013      	beq.n	800223e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	4a7e      	ldr	r2, [pc, #504]	; (8002414 <HAL_UART_IRQHandler+0x3e0>)
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe ff00 	bl	8001028 <HAL_DMA_Abort_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002238:	4610      	mov	r0, r2
 800223a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800223c:	e00e      	b.n	800225c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9a5 	bl	800258e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002244:	e00a      	b.n	800225c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9a1 	bl	800258e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	e006      	b.n	800225c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f99d 	bl	800258e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800225a:	e175      	b.n	8002548 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	bf00      	nop
    return;
 800225e:	e173      	b.n	8002548 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	2b01      	cmp	r3, #1
 8002266:	f040 814f 	bne.w	8002508 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800226a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8148 	beq.w	8002508 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8141 	beq.w	8002508 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80b6 	beq.w	8002418 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8145 	beq.w	800254c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022ca:	429a      	cmp	r2, r3
 80022cc:	f080 813e 	bcs.w	800254c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b20      	cmp	r3, #32
 80022e0:	f000 8088 	beq.w	80023f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022f2:	e853 3f00 	ldrex	r3, [r3]
 80022f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	330c      	adds	r3, #12
 800230c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002310:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800231c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1d9      	bne.n	80022e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3314      	adds	r3, #20
 8002336:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800233a:	e853 3f00 	ldrex	r3, [r3]
 800233e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3314      	adds	r3, #20
 8002350:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002354:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002358:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800235c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002360:	e841 2300 	strex	r3, r2, [r1]
 8002364:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e1      	bne.n	8002330 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3314      	adds	r3, #20
 8002372:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002376:	e853 3f00 	ldrex	r3, [r3]
 800237a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800237c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3314      	adds	r3, #20
 800238c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002390:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002392:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002398:	e841 2300 	strex	r3, r2, [r1]
 800239c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800239e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e3      	bne.n	800236c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c4:	f023 0310 	bic.w	r3, r3, #16
 80023c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80023d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023de:	e841 2300 	strex	r3, r2, [r1]
 80023e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e3      	bne.n	80023b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fdde 	bl	8000fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002402:	b29b      	uxth	r3, r3
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	b29b      	uxth	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe f856 	bl	80004bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002410:	e09c      	b.n	800254c <HAL_UART_IRQHandler+0x518>
 8002412:	bf00      	nop
 8002414:	080029e3 	.word	0x080029e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002420:	b29b      	uxth	r3, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 808e 	beq.w	8002550 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8089 	beq.w	8002550 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	330c      	adds	r3, #12
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	e853 3f00 	ldrex	r3, [r3]
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002462:	647a      	str	r2, [r7, #68]	; 0x44
 8002464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800246a:	e841 2300 	strex	r3, r2, [r1]
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e3      	bne.n	800243e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3314      	adds	r3, #20
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	e853 3f00 	ldrex	r3, [r3]
 8002484:	623b      	str	r3, [r7, #32]
   return(result);
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3314      	adds	r3, #20
 8002496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800249a:	633a      	str	r2, [r7, #48]	; 0x30
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e3      	bne.n	8002476 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	330c      	adds	r3, #12
 80024c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	e853 3f00 	ldrex	r3, [r3]
 80024ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0310 	bic.w	r3, r3, #16
 80024d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024e0:	61fa      	str	r2, [r7, #28]
 80024e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e4:	69b9      	ldr	r1, [r7, #24]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	e841 2300 	strex	r3, r2, [r1]
 80024ec:	617b      	str	r3, [r7, #20]
   return(result);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e3      	bne.n	80024bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fd ffdb 	bl	80004bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002506:	e023      	b.n	8002550 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_UART_IRQHandler+0x4f4>
 8002514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fa72 	bl	8002a0a <UART_Transmit_IT>
    return;
 8002526:	e014      	b.n	8002552 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <HAL_UART_IRQHandler+0x51e>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fab1 	bl	8002aa8 <UART_EndTransmit_IT>
    return;
 8002546:	e004      	b.n	8002552 <HAL_UART_IRQHandler+0x51e>
    return;
 8002548:	bf00      	nop
 800254a:	e002      	b.n	8002552 <HAL_UART_IRQHandler+0x51e>
      return;
 800254c:	bf00      	nop
 800254e:	e000      	b.n	8002552 <HAL_UART_IRQHandler+0x51e>
      return;
 8002550:	bf00      	nop
  }
}
 8002552:	37e8      	adds	r7, #232	; 0xe8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b09c      	sub	sp, #112	; 0x70
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d172      	bne.n	80026a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80025bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025be:	2200      	movs	r2, #0
 80025c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	330c      	adds	r3, #12
 80025c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	e853 3f00 	ldrex	r3, [r3]
 80025d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80025e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025ea:	e841 2300 	strex	r3, r2, [r1]
 80025ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e5      	bne.n	80025c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3314      	adds	r3, #20
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	667b      	str	r3, [r7, #100]	; 0x64
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3314      	adds	r3, #20
 8002614:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002616:	647a      	str	r2, [r7, #68]	; 0x44
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e5      	bne.n	80025f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	623b      	str	r3, [r7, #32]
   return(result);
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002640:	663b      	str	r3, [r7, #96]	; 0x60
 8002642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3314      	adds	r3, #20
 8002648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800264a:	633a      	str	r2, [r7, #48]	; 0x30
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e5      	bne.n	800262a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	2b01      	cmp	r3, #1
 800266c:	d119      	bne.n	80026a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	e853 3f00 	ldrex	r3, [r3]
 800267c:	60fb      	str	r3, [r7, #12]
   return(result);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f023 0310 	bic.w	r3, r3, #16
 8002684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800268e:	61fa      	str	r2, [r7, #28]
 8002690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	617b      	str	r3, [r7, #20]
   return(result);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e5      	bne.n	800266e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	2200      	movs	r2, #0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b4:	4619      	mov	r1, r3
 80026b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80026b8:	f7fd ff00 	bl	80004bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026bc:	e002      	b.n	80026c4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80026be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80026c0:	f7ff ff53 	bl	800256a <HAL_UART_RxCpltCallback>
}
 80026c4:	bf00      	nop
 80026c6:	3770      	adds	r7, #112	; 0x70
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7fd fee2 	bl	80004bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026f8:	e002      	b.n	8002700 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff ff3e 	bl	800257c <HAL_UART_RxHalfCpltCallback>
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b21      	cmp	r3, #33	; 0x21
 800273a:	d108      	bne.n	800274e <UART_DMAError+0x46>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f000 f8c1 	bl	80028d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b22      	cmp	r3, #34	; 0x22
 800276e:	d108      	bne.n	8002782 <UART_DMAError+0x7a>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800277c:	68b8      	ldr	r0, [r7, #8]
 800277e:	f000 f8ce 	bl	800291e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f043 0210 	orr.w	r2, r3, #16
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800278e:	68b8      	ldr	r0, [r7, #8]
 8002790:	f7ff fefd 	bl	800258e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b098      	sub	sp, #96	; 0x60
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2222      	movs	r2, #34	; 0x22
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	4a3e      	ldr	r2, [pc, #248]	; (80028c4 <UART_Start_Receive_DMA+0x128>)
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	4a3d      	ldr	r2, [pc, #244]	; (80028c8 <UART_Start_Receive_DMA+0x12c>)
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	4a3c      	ldr	r2, [pc, #240]	; (80028cc <UART_Start_Receive_DMA+0x130>)
 80027da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	2200      	movs	r2, #0
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	f7fe fb78 	bl	8000ef0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d019      	beq.n	8002852 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	65bb      	str	r3, [r7, #88]	; 0x58
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800283e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002842:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002844:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e5      	bne.n	800281e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	657b      	str	r3, [r7, #84]	; 0x54
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002872:	63ba      	str	r2, [r7, #56]	; 0x38
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800287a:	e841 2300 	strex	r3, r2, [r1]
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e5      	bne.n	8002852 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3314      	adds	r3, #20
 800288c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	617b      	str	r3, [r7, #20]
   return(result);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289c:	653b      	str	r3, [r7, #80]	; 0x50
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028a6:	627a      	str	r2, [r7, #36]	; 0x24
 80028a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e5      	bne.n	8002886 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3760      	adds	r7, #96	; 0x60
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	080025a1 	.word	0x080025a1
 80028c8:	080026cd 	.word	0x080026cd
 80028cc:	08002709 	.word	0x08002709

080028d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	61ba      	str	r2, [r7, #24]
 80028fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6979      	ldr	r1, [r7, #20]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	613b      	str	r3, [r7, #16]
   return(result);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002914:	bf00      	nop
 8002916:	3724      	adds	r7, #36	; 0x24
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800291e:	b480      	push	{r7}
 8002920:	b095      	sub	sp, #84	; 0x54
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800293c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002946:	643a      	str	r2, [r7, #64]	; 0x40
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800294c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	61fb      	str	r3, [r7, #28]
   return(result);
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3314      	adds	r3, #20
 8002978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800297a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	2b01      	cmp	r3, #1
 8002994:	d119      	bne.n	80029ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f023 0310 	bic.w	r3, r3, #16
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b6:	61ba      	str	r2, [r7, #24]
 80029b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6979      	ldr	r1, [r7, #20]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	613b      	str	r3, [r7, #16]
   return(result);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e5      	bne.n	8002996 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029d8:	bf00      	nop
 80029da:	3754      	adds	r7, #84	; 0x54
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff fdc6 	bl	800258e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b21      	cmp	r3, #33	; 0x21
 8002a1c:	d13e      	bne.n	8002a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d114      	bne.n	8002a52 <UART_Transmit_IT+0x48>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d110      	bne.n	8002a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	1c9a      	adds	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	621a      	str	r2, [r3, #32]
 8002a50:	e008      	b.n	8002a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	1c59      	adds	r1, r3, #1
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6211      	str	r1, [r2, #32]
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4619      	mov	r1, r3
 8002a72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fd45 	bl	8002558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b22      	cmp	r3, #34	; 0x22
 8002aea:	f040 80ae 	bne.w	8002c4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af6:	d117      	bne.n	8002b28 <UART_Receive_IT+0x50>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d113      	bne.n	8002b28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
 8002b26:	e026      	b.n	8002b76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d007      	beq.n	8002b4c <UART_Receive_IT+0x74>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <UART_Receive_IT+0x82>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e008      	b.n	8002b6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4619      	mov	r1, r3
 8002b84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d15d      	bne.n	8002c46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0220 	bic.w	r2, r2, #32
 8002b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d135      	bne.n	8002c3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	613b      	str	r3, [r7, #16]
   return(result);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f023 0310 	bic.w	r3, r3, #16
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	623a      	str	r2, [r7, #32]
 8002bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	69f9      	ldr	r1, [r7, #28]
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e5      	bne.n	8002bd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d10a      	bne.n	8002c2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fd fc41 	bl	80004bc <HAL_UARTEx_RxEventCallback>
 8002c3a:	e002      	b.n	8002c42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fc94 	bl	800256a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e002      	b.n	8002c4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3730      	adds	r7, #48	; 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c8e:	f023 030c 	bic.w	r3, r3, #12
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <UART_SetConfig+0x114>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d103      	bne.n	8002cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cbc:	f7ff f8da 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	e002      	b.n	8002cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7ff f8c2 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 8002cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <UART_SetConfig+0x118>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	0119      	lsls	r1, r3, #4
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009a      	lsls	r2, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <UART_SetConfig+0x118>)
 8002d02:	fba3 0302 	umull	r0, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2064      	movs	r0, #100	; 0x64
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	3332      	adds	r3, #50	; 0x32
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <UART_SetConfig+0x118>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	4419      	add	r1, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009a      	lsls	r2, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <UART_SetConfig+0x118>)
 8002d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2064      	movs	r0, #100	; 0x64
 8002d42:	fb00 f303 	mul.w	r3, r0, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	3332      	adds	r3, #50	; 0x32
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <UART_SetConfig+0x118>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	51eb851f 	.word	0x51eb851f

08002d70 <atoi>:
 8002d70:	220a      	movs	r2, #10
 8002d72:	2100      	movs	r1, #0
 8002d74:	f000 b87e 	b.w	8002e74 <strtol>

08002d78 <_strtol_l.constprop.0>:
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d7e:	4686      	mov	lr, r0
 8002d80:	4690      	mov	r8, r2
 8002d82:	d001      	beq.n	8002d88 <_strtol_l.constprop.0+0x10>
 8002d84:	2b24      	cmp	r3, #36	; 0x24
 8002d86:	d906      	bls.n	8002d96 <_strtol_l.constprop.0+0x1e>
 8002d88:	f000 f886 	bl	8002e98 <__errno>
 8002d8c:	2316      	movs	r3, #22
 8002d8e:	6003      	str	r3, [r0, #0]
 8002d90:	2000      	movs	r0, #0
 8002d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d96:	460d      	mov	r5, r1
 8002d98:	4835      	ldr	r0, [pc, #212]	; (8002e70 <_strtol_l.constprop.0+0xf8>)
 8002d9a:	462a      	mov	r2, r5
 8002d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002da0:	5d06      	ldrb	r6, [r0, r4]
 8002da2:	f016 0608 	ands.w	r6, r6, #8
 8002da6:	d1f8      	bne.n	8002d9a <_strtol_l.constprop.0+0x22>
 8002da8:	2c2d      	cmp	r4, #45	; 0x2d
 8002daa:	d12e      	bne.n	8002e0a <_strtol_l.constprop.0+0x92>
 8002dac:	2601      	movs	r6, #1
 8002dae:	782c      	ldrb	r4, [r5, #0]
 8002db0:	1c95      	adds	r5, r2, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d057      	beq.n	8002e66 <_strtol_l.constprop.0+0xee>
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d109      	bne.n	8002dce <_strtol_l.constprop.0+0x56>
 8002dba:	2c30      	cmp	r4, #48	; 0x30
 8002dbc:	d107      	bne.n	8002dce <_strtol_l.constprop.0+0x56>
 8002dbe:	782a      	ldrb	r2, [r5, #0]
 8002dc0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002dc4:	2a58      	cmp	r2, #88	; 0x58
 8002dc6:	d149      	bne.n	8002e5c <_strtol_l.constprop.0+0xe4>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	786c      	ldrb	r4, [r5, #1]
 8002dcc:	3502      	adds	r5, #2
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8002dd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002dd8:	fbbc f9f3 	udiv	r9, ip, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	fb03 ca19 	mls	sl, r3, r9, ip
 8002de2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002de6:	2f09      	cmp	r7, #9
 8002de8:	d814      	bhi.n	8002e14 <_strtol_l.constprop.0+0x9c>
 8002dea:	463c      	mov	r4, r7
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	dd20      	ble.n	8002e32 <_strtol_l.constprop.0+0xba>
 8002df0:	1c57      	adds	r7, r2, #1
 8002df2:	d007      	beq.n	8002e04 <_strtol_l.constprop.0+0x8c>
 8002df4:	4581      	cmp	r9, r0
 8002df6:	d319      	bcc.n	8002e2c <_strtol_l.constprop.0+0xb4>
 8002df8:	d101      	bne.n	8002dfe <_strtol_l.constprop.0+0x86>
 8002dfa:	45a2      	cmp	sl, r4
 8002dfc:	db16      	blt.n	8002e2c <_strtol_l.constprop.0+0xb4>
 8002dfe:	2201      	movs	r2, #1
 8002e00:	fb00 4003 	mla	r0, r0, r3, r4
 8002e04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e08:	e7eb      	b.n	8002de2 <_strtol_l.constprop.0+0x6a>
 8002e0a:	2c2b      	cmp	r4, #43	; 0x2b
 8002e0c:	bf04      	itt	eq
 8002e0e:	782c      	ldrbeq	r4, [r5, #0]
 8002e10:	1c95      	addeq	r5, r2, #2
 8002e12:	e7ce      	b.n	8002db2 <_strtol_l.constprop.0+0x3a>
 8002e14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002e18:	2f19      	cmp	r7, #25
 8002e1a:	d801      	bhi.n	8002e20 <_strtol_l.constprop.0+0xa8>
 8002e1c:	3c37      	subs	r4, #55	; 0x37
 8002e1e:	e7e5      	b.n	8002dec <_strtol_l.constprop.0+0x74>
 8002e20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002e24:	2f19      	cmp	r7, #25
 8002e26:	d804      	bhi.n	8002e32 <_strtol_l.constprop.0+0xba>
 8002e28:	3c57      	subs	r4, #87	; 0x57
 8002e2a:	e7df      	b.n	8002dec <_strtol_l.constprop.0+0x74>
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	e7e8      	b.n	8002e04 <_strtol_l.constprop.0+0x8c>
 8002e32:	1c53      	adds	r3, r2, #1
 8002e34:	d108      	bne.n	8002e48 <_strtol_l.constprop.0+0xd0>
 8002e36:	2322      	movs	r3, #34	; 0x22
 8002e38:	4660      	mov	r0, ip
 8002e3a:	f8ce 3000 	str.w	r3, [lr]
 8002e3e:	f1b8 0f00 	cmp.w	r8, #0
 8002e42:	d0a6      	beq.n	8002d92 <_strtol_l.constprop.0+0x1a>
 8002e44:	1e69      	subs	r1, r5, #1
 8002e46:	e006      	b.n	8002e56 <_strtol_l.constprop.0+0xde>
 8002e48:	b106      	cbz	r6, 8002e4c <_strtol_l.constprop.0+0xd4>
 8002e4a:	4240      	negs	r0, r0
 8002e4c:	f1b8 0f00 	cmp.w	r8, #0
 8002e50:	d09f      	beq.n	8002d92 <_strtol_l.constprop.0+0x1a>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d1f6      	bne.n	8002e44 <_strtol_l.constprop.0+0xcc>
 8002e56:	f8c8 1000 	str.w	r1, [r8]
 8002e5a:	e79a      	b.n	8002d92 <_strtol_l.constprop.0+0x1a>
 8002e5c:	2430      	movs	r4, #48	; 0x30
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1b5      	bne.n	8002dce <_strtol_l.constprop.0+0x56>
 8002e62:	2308      	movs	r3, #8
 8002e64:	e7b3      	b.n	8002dce <_strtol_l.constprop.0+0x56>
 8002e66:	2c30      	cmp	r4, #48	; 0x30
 8002e68:	d0a9      	beq.n	8002dbe <_strtol_l.constprop.0+0x46>
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	e7af      	b.n	8002dce <_strtol_l.constprop.0+0x56>
 8002e6e:	bf00      	nop
 8002e70:	08002f73 	.word	0x08002f73

08002e74 <strtol>:
 8002e74:	4613      	mov	r3, r2
 8002e76:	460a      	mov	r2, r1
 8002e78:	4601      	mov	r1, r0
 8002e7a:	4802      	ldr	r0, [pc, #8]	; (8002e84 <strtol+0x10>)
 8002e7c:	6800      	ldr	r0, [r0, #0]
 8002e7e:	f7ff bf7b 	b.w	8002d78 <_strtol_l.constprop.0>
 8002e82:	bf00      	nop
 8002e84:	2000005c 	.word	0x2000005c

08002e88 <memset>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__errno>:
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <__errno+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000005c 	.word	0x2000005c

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 f828 	bl	8002f08 <_init>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	0800307c 	.word	0x0800307c
 8002ee0:	0800307c 	.word	0x0800307c
 8002ee4:	0800307c 	.word	0x0800307c
 8002ee8:	08003080 	.word	0x08003080

08002eec <memcpy>:
 8002eec:	440a      	add	r2, r1
 8002eee:	4291      	cmp	r1, r2
 8002ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ef4:	d100      	bne.n	8002ef8 <memcpy+0xc>
 8002ef6:	4770      	bx	lr
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002efe:	4291      	cmp	r1, r2
 8002f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f04:	d1f9      	bne.n	8002efa <memcpy+0xe>
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
